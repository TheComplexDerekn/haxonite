// From: Algorithmic Beauty of Plants, pp.23-24

// Part of the Haxonite project, under the MIT License.
// Copyright 2025 Derek Noonburg

module edge3 is

  import TurtleGfx;

  func main() is
    var args = commandLineArgs();
    if #args != 1 then
      ewrite("Usage: edge3 <png-file>\n");
      return;
    end
    var pngFileName = args[0];

    var w = 1000;
    var h = 1000;
    var angle0 = 0;
    var angleDivs = 6;   // = 360 / angleDelta

    var axiom = "L";
    var rules = { 'L': "L+R++R-L--LL-R+",
                  'R': "-L+RR++R+L--L-R" };
    var n = 5;
    var x0 = 800.0;
    var y0 = 800.0;
    var step = 500.0 / pow(2.5, toFloat(n));

    var sequence = generate(axiom, rules, n);
    var length = byteLength(sequence);
    write($"sequence has {length} steps\n");
    // write($"sequence = '{sequence}'\n");
    draw(sequence, x0, y0, angle0, step, angleDivs, pngFileName, w, h);
  end

  // Starting with [axiom], run [n] derivations of [rules].
  func generate(axiom: String, rules: Map[Int,String], n: Int) -> String is
    var s = axiom;
    for i : 0 .. n-1 do
      var ss = new StringBuf;
      for j : 0 .. byteLength(s) - 1 do
        var c = byte(s, j);
        if contains(rules, c) then
          append(ss, rules[c]);
        else
          appendByte(ss, c);
        end
      end
      s = toString(ss);
    end
    return s;
  end

  func draw(sequence: String,
            x0: Float, y0: Float, angle0: Int, step: Float, angleDivs: Int,
            pngFileName: String, w: Int, h: Int) is
    var gfx = openTurtleGfx(pngFileName, w, h, angleDivs);
    moveTo(gfx, x0, y0);
    turnTo(gfx, angle0);
    setColor(gfx, rgb(0, 0, 255));
    for i : 0 .. byteLength(sequence) - 1 do
      var c = byte(sequence, i);
      if c == 'L' | c == 'R' then
        penDown(gfx);
        forward(gfx, step);
      elseif c == '+' then
        turn(gfx, 1);
      elseif c == '-' then
        turn(gfx, -1);
      else
        ewrite($"Invalid character '{c:c}' in sequence");
      end
    end
    close(gfx);
  end

end

