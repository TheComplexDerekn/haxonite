// DataFile parser.

// Part of the Haxonite project, under the MIT License.
// Copyright 2025 Derek Noonburg

module DataFile is

  struct DataFile is
    tag: String;
    sections: Vector[DataSection];
  end

  struct DataSection is
    tag: String; 
    items: Vector[DataItem];
    lineNum: Int;
  end

  struct DataItem is
    cmd: String;
    args: Vector[String];
    lineNum: Int;
  end

  struct DataParser is
    buf: StringBuf;
    pos: Int;
    lineNum: Int;      // [pos] points to the start of line [lineNum]
  end

  enum DataArgType is
    string;
    int;
    float;
  end

  // Parses [in] and returns a DataFile. On syntax error: calls [err]
  // and returns an error.
  func parseDataFile(in: StringBuf, err: Func[Int,String]) -> Result[DataFile] is
    var parser = make DataParser(buf: in, pos: 0, lineNum: 1);

    //--- file header
    if !more(parser) then
      (err)(parser.lineNum, "Missing file header");
      return error[DataFile];
    end
    var line = readLine(parser, err)?;
    if #line != 1 || !startsWith(line[0], "@") then
      (err)(parser.lineNum - 1, "Invalid file header");
      return error[DataFile];
    end

    //--- construct the DataFile object
    var sections = new Vector[DataSection];
    var dataFile = make DataFile(tag: substr(line[0], 1, byteLength(line[0])),
                                 sections: sections);

    //--- data: sections and items
    var section = nil[DataSection];
    while more(parser) do
      line = readLine(parser, err)?;

      //--- section
      if #line == 1 && startsWith(line[0], "-") then
        var tag = substr(line[0], 1, byteLength(line[0]));
        section = make DataSection(tag: tag,
                                   items: new Vector[DataItem],
                                   lineNum: parser.lineNum - 1);
        append(sections, section);

      //--- item
      else
        if nil(section) then
          (err)(parser.lineNum - 1, "Missing section header");
          return error[DataFile];
        end
        var args = new Vector[String];
        for i : 1 .. #line - 1 do
          append(args, line[i]);
        end
        var item = make DataItem(cmd: line[0],
                                 args: args,
                                 lineNum: parser.lineNum - 1);
        append(section.items, item);
      end
    end

    return valid(dataFile);
  end

  // Returns true if there is another (non-blank, non-comment) line
  // available. Returns false at end-of-input.
  func more(parser: DataParser) -> Bool is
    while true do
      // end of data
      if parser.pos >= byteLength(parser.buf) then
        return false;
      end
      var pos2 = parser.pos;

      // skip spaces at start of line
      while pos2 < byteLength(parser.buf) && byte(parser.buf, pos2) == ' ' do
        pos2 = pos2 + 1;
      end

      // skip comment
      if pos2 <= byteLength(parser.buf) - 2 && byte(parser.buf, pos2) == '/' &&
         byte(parser.buf, pos2+1) == '/' then
        pos2 = pos2 + 2;
        while pos2 < byteLength(parser.buf) && byte(parser.buf, pos2) != '\n' do
          pos2 = pos2 + 1;
        end
      end

      // end of data (unterminated last line)
      if pos2 >= byteLength(parser.buf) then
        return false;

      // blank line or comment
      elseif byte(parser.buf, pos2) == '\n' then
        parser.pos = pos2 + 1;
        parser.lineNum = parser.lineNum + 1;

      // valid line
      else
        return true;
      end
    end
    return false; // never reached
  end

  // Splits the next line into tokens. If the next line is invalid,
  // calls [err] and returns an error. This function must be called
  // only after more() returns true.
  func readLine(parser: DataParser, err: Func[Int,String]) -> Result[Vector[String]] is
    // skip spaces at start of line
    while parser.pos < byteLength(parser.buf) && byte(parser.buf, parser.pos) == ' ' do
      parser.pos = parser.pos + 1;
    end
    if parser.pos == byteLength(parser.buf) then
      (err)(parser.lineNum, "Syntax error");
      return error[Vector[String]];
    end

    var tokens = new Vector[String];
    while true do
      var c = byte(parser.buf, parser.pos);

      // end of line
      if c == '\n' then
        parser.pos = parser.pos + 1;
        parser.lineNum = parser.lineNum + 1;
        break;
      end

      var token = new StringBuf;

      // quoted token
      if c == '"' then
        parser.pos = parser.pos + 1;
        while true do
          if parser.pos == byteLength(parser.buf) then
            (err)(parser.lineNum, "Unterminated string");
            return error[Vector[String]];
          end
          c = byte(parser.buf, parser.pos);
          parser.pos = parser.pos + 1;
          if c == '"' then
            break;
          end
          if c == '\\' then
            if parser.pos == byteLength(parser.buf) then
              (err)(parser.lineNum, "Invalid escape character in string");
              return error[Vector[String]];
            end
            c = byte(parser.buf, parser.pos);
            parser.pos = parser.pos + 1;
            if c == '"' || c == '\\' then
              appendByte(token, c);
            else
              (err)(parser.lineNum, "Invalid escape character in string");
              return error[Vector[String]];
            end
          else
            appendByte(token, c);
          end
        end

      // unquoted token
      else
        while parser.pos < byteLength(parser.buf) do
          c = byte(parser.buf, parser.pos);
          if c == ' ' || c == '\n' then
            break;
          end
          appendByte(token, c);
          parser.pos = parser.pos + 1;
        end
      end

      append(tokens, toString(token));

      // skip spaces before next token
      while parser.pos < byteLength(parser.buf) && byte(parser.buf, parser.pos) == ' ' do
        parser.pos = parser.pos + 1;
      end

      // unterminated line
      if parser.pos == byteLength(parser.buf) then
        // increment lineNum here because parseDataFile() error messages use lineNum - 1
        parser.lineNum = parser.lineNum + 1;
        break;
      end
    end

    return valid(tokens);
  end

  // Checks that the arguments in [item] match [argTypes]. If not:
  // calls [err] and returns an error.
  func check(item: DataItem, argTypes: Vector[DataArgType], err: Func[Int,String]) -> Result[] is
    if #item.args != #argTypes then
      (err)(item.lineNum, "Wrong number of arguments");
      return error[];
    end
    for i : 0 .. #item.args - 1 do
      if argTypes[i] == DataArgType.string then
        // no additional check
      elseif argTypes[i] == DataArgType.int then
        if !ok(toInt(item.args[i])) then
          (err)(item.lineNum, "Invalid argument");
        end
      elseif argTypes[i] == DataArgType.float then
        if !ok(toFloat(item.args[i])) then
          (err)(item.lineNum, "Invalid argument");
        end
      end
    end
    return valid();
  end

end
