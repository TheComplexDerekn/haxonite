module set2 is

  func main() is
    var s = new Set[String];

    // this is the first few paragraphs of the wikipedia entry for
    // "compiler"

    insert(s, "In");
    insert(s, "computing");
    insert(s, "a");
    insert(s, "compiler");
    insert(s, "is");
    insert(s, "a");
    insert(s, "computer");
    insert(s, "program");
    insert(s, "that");
    insert(s, "translates");
    insert(s, "computer");
    insert(s, "code");
    insert(s, "written");
    insert(s, "in");
    insert(s, "one");
    insert(s, "programming");
    insert(s, "language");
    insert(s, "the");
    insert(s, "source");
    insert(s, "language");
    insert(s, "into");
    insert(s, "another");
    insert(s, "language");
    insert(s, "the");
    insert(s, "target");
    insert(s, "language");
    insert(s, "The");
    insert(s, "name");
    insert(s, "compiler");
    insert(s, "is");
    insert(s, "primarily");
    insert(s, "used");
    insert(s, "for");
    insert(s, "programs");
    insert(s, "that");
    insert(s, "translate");
    insert(s, "source");
    insert(s, "code");
    insert(s, "from");
    insert(s, "a");
    insert(s, "high");
    insert(s, "level");
    insert(s, "programming");
    insert(s, "language");
    insert(s, "to");
    insert(s, "a");
    insert(s, "low");
    insert(s, "level");
    insert(s, "programming");
    insert(s, "language");
    insert(s, "e.g.");
    insert(s, "assembly");
    insert(s, "language");
    insert(s, "object");
    insert(s, "code");
    insert(s, "or");
    insert(s, "machine");
    insert(s, "code");
    insert(s, "to");
    insert(s, "create");
    insert(s, "an");
    insert(s, "executable");
    insert(s, "program");
    insert(s, "There");
    insert(s, "are");
    insert(s, "many");
    insert(s, "different");
    insert(s, "types");
    insert(s, "of");
    insert(s, "compilers");
    insert(s, "which");
    insert(s, "produce");
    insert(s, "output");
    insert(s, "in");
    insert(s, "different");
    insert(s, "useful");
    insert(s, "forms");
    insert(s, "A");
    insert(s, "cross-compiler");
    insert(s, "produces");
    insert(s, "code");
    insert(s, "for");
    insert(s, "a");
    insert(s, "different");
    insert(s, "CPU");
    insert(s, "or");
    insert(s, "operating");
    insert(s, "system");
    insert(s, "than");
    insert(s, "the");
    insert(s, "one");
    insert(s, "on");
    insert(s, "which");
    insert(s, "the");
    insert(s, "cross-compiler");
    insert(s, "itself");
    insert(s, "runs");
    insert(s, "A");
    insert(s, "bootstrap");
    insert(s, "compiler");
    insert(s, "is");
    insert(s, "often");
    insert(s, "a");
    insert(s, "temporary");
    insert(s, "compiler");
    insert(s, "used");
    insert(s, "for");
    insert(s, "compiling");
    insert(s, "a");
    insert(s, "more");
    insert(s, "permanent");
    insert(s, "or");
    insert(s, "better");
    insert(s, "optimised");
    insert(s, "compiler");
    insert(s, "for");
    insert(s, "a");
    insert(s, "language");
    insert(s, "Related");
    insert(s, "software");
    insert(s, "include");
    insert(s, "decompilers");
    insert(s, "programs");
    insert(s, "that");
    insert(s, "translate");
    insert(s, "from");
    insert(s, "low");
    insert(s, "level");
    insert(s, "languages");
    insert(s, "to");
    insert(s, "higher");
    insert(s, "level");
    insert(s, "ones");
    insert(s, "programs");
    insert(s, "that");
    insert(s, "translate");
    insert(s, "between");
    insert(s, "high");
    insert(s, "level");
    insert(s, "languages");
    insert(s, "usually");
    insert(s, "called");
    insert(s, "source");
    insert(s, "to");
    insert(s, "source");
    insert(s, "compilers");
    insert(s, "or");
    insert(s, "transpilers");
    insert(s, "language");
    insert(s, "rewriters");
    insert(s, "usually");
    insert(s, "programs");
    insert(s, "that");
    insert(s, "translate");
    insert(s, "the");
    insert(s, "form");
    insert(s, "of");
    insert(s, "expressions");
    insert(s, "without");
    insert(s, "a");
    insert(s, "change");
    insert(s, "of");
    insert(s, "language");
    insert(s, "and");
    insert(s, "compiler");
    insert(s, "compilers");
    insert(s, "compilers");
    insert(s, "that");
    insert(s, "produce");
    insert(s, "compilers");
    insert(s, "or");
    insert(s, "parts");
    insert(s, "of");
    insert(s, "them");
    insert(s, "often");
    insert(s, "in");
    insert(s, "a");
    insert(s, "generic");
    insert(s, "and");
    insert(s, "reusable");
    insert(s, "way");
    insert(s, "so");
    insert(s, "as");
    insert(s, "to");
    insert(s, "be");
    insert(s, "able");
    insert(s, "to");
    insert(s, "produce");
    insert(s, "many");
    insert(s, "differing");
    insert(s, "compilers");

    write("--- A ---\n");
    var n = #s;
    write($"length = {n}\n");
    check(s, "A");
    check(s, "a");
    check(s, "compiler");
    check(s, "compilers");
    check(s, "compiler's");
    check(s, "language");
    check(s, "different");
    check(s, "the");
    check(s, "generic");
    check(s, "and");
    check(s, "reusable");

    delete(s, "compilers");
    delete(s, "language");
    delete(s, "different");
    delete(s, "the");
    delete(s, "xyz");

    write("--- B ---\n");
    n = #s;
    write($"length = {n}\n");
    check(s, "A");
    check(s, "a");
    check(s, "compiler");
    check(s, "compilers");
    check(s, "compiler's");
    check(s, "language");
    check(s, "different");
    check(s, "the");
    check(s, "generic");
    check(s, "and");
    check(s, "reusable");

    delete(s, "In");
    delete(s, "computing");
    delete(s, "a");
    delete(s, "compiler");
    delete(s, "is");
    delete(s, "a");
    delete(s, "computer");
    delete(s, "program");
    delete(s, "that");
    delete(s, "translates");
    delete(s, "computer");
    delete(s, "code");
    delete(s, "written");
    delete(s, "in");
    delete(s, "one");
    delete(s, "programming");
    delete(s, "language");
    delete(s, "the");
    delete(s, "source");
    delete(s, "language");
    delete(s, "into");
    delete(s, "another");
    delete(s, "language");
    delete(s, "the");
    delete(s, "target");
    delete(s, "language");
    delete(s, "The");
    delete(s, "name");
    delete(s, "compiler");
    delete(s, "is");
    delete(s, "primarily");
    delete(s, "used");
    delete(s, "for");
    delete(s, "programs");
    delete(s, "that");
    delete(s, "translate");
    delete(s, "source");
    delete(s, "code");
    delete(s, "from");
    delete(s, "a");
    delete(s, "high");
    delete(s, "level");
    delete(s, "programming");
    delete(s, "language");
    delete(s, "to");
    delete(s, "a");
    delete(s, "low");
    delete(s, "level");
    delete(s, "programming");
    delete(s, "language");
    delete(s, "e.g.");
    delete(s, "assembly");
    delete(s, "language");
    delete(s, "object");
    delete(s, "code");
    delete(s, "or");
    delete(s, "machine");
    delete(s, "code");
    delete(s, "to");
    delete(s, "create");
    delete(s, "an");
    delete(s, "executable");
    delete(s, "program");
    delete(s, "There");
    delete(s, "are");
    delete(s, "many");
    delete(s, "different");
    delete(s, "types");
    delete(s, "of");
    delete(s, "compilers");
    delete(s, "which");
    delete(s, "produce");
    delete(s, "output");
    delete(s, "in");
    delete(s, "different");
    delete(s, "useful");
    delete(s, "forms");
    delete(s, "A");
    delete(s, "cross-compiler");
    delete(s, "produces");
    delete(s, "code");
    delete(s, "for");
    delete(s, "a");
    delete(s, "different");
    delete(s, "CPU");
    delete(s, "or");
    delete(s, "operating");
    delete(s, "system");
    delete(s, "than");
    delete(s, "the");
    delete(s, "one");
    delete(s, "on");
    delete(s, "which");
    delete(s, "the");
    delete(s, "cross-compiler");
    delete(s, "itself");
    delete(s, "runs");
    delete(s, "A");
    delete(s, "bootstrap");
    delete(s, "compiler");
    delete(s, "is");
    delete(s, "often");
    delete(s, "a");
    delete(s, "temporary");
    delete(s, "compiler");
    delete(s, "used");
    delete(s, "for");
    delete(s, "compiling");
    delete(s, "a");
    delete(s, "more");
    delete(s, "permanent");
    delete(s, "or");
    delete(s, "better");
    delete(s, "optimised");
    delete(s, "compiler");
    delete(s, "for");
    delete(s, "a");
    delete(s, "language");
    delete(s, "Related");
    delete(s, "software");
    delete(s, "include");
    delete(s, "decompilers");
    delete(s, "programs");
    delete(s, "that");
    delete(s, "translate");
    delete(s, "from");
    delete(s, "low");
    delete(s, "level");
    delete(s, "languages");
    delete(s, "to");
    delete(s, "higher");
    delete(s, "level");
    delete(s, "ones");
    delete(s, "programs");
    delete(s, "that");
    delete(s, "translate");
    delete(s, "between");
    delete(s, "high");
    delete(s, "level");
    delete(s, "languages");
    delete(s, "usually");
    delete(s, "called");
    delete(s, "source");
    delete(s, "to");
    delete(s, "source");
    delete(s, "compilers");
    delete(s, "or");
    delete(s, "transpilers");
    delete(s, "language");
    delete(s, "rewriters");
    delete(s, "usually");
    delete(s, "programs");
    delete(s, "that");
    delete(s, "translate");
    delete(s, "the");
    delete(s, "form");
    delete(s, "of");
    delete(s, "expressions");
    delete(s, "without");
    delete(s, "a");
    delete(s, "change");
    delete(s, "of");
    delete(s, "language");
    delete(s, "and");
    delete(s, "compiler");
    delete(s, "compilers");
    delete(s, "compilers");
    delete(s, "that");
    delete(s, "produce");
    delete(s, "compilers");
    delete(s, "or");
    delete(s, "parts");
    delete(s, "of");
    delete(s, "them");
    delete(s, "often");
    delete(s, "in");
    delete(s, "a");
    delete(s, "generic");
    delete(s, "and");
    delete(s, "reusable");
    delete(s, "way");
    delete(s, "so");
    delete(s, "as");
    delete(s, "to");
    delete(s, "be");
    delete(s, "able");
    delete(s, "to");
    delete(s, "produce");
    delete(s, "many");
    delete(s, "differing");
    delete(s, "compilers");

    write("--- C ---\n");
    n = #s;
    write($"length = {n}\n");
    check(s, "A");
    check(s, "a");
    check(s, "compiler");
    check(s, "compilers");
    check(s, "compiler's");
    check(s, "language");
    check(s, "different");
    check(s, "the");
    check(s, "generic");
    check(s, "and");
    check(s, "reusable");
  end

  func check(s: Set[String], key: String) is
    var t = contains(s, key);
    write($"{key} -> {t}\n");
  end

end
